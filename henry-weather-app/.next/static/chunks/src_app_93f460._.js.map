{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/LightModeButton/LightModeButton.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"light_mode_button\": \"LightModeButton-module__cze1tW__light_mode_button\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 9, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynunez/Desktop/henrys-weather-app/henry-weather-app/src/app/components/LightModeButton/LightModeButton.tsx"],"sourcesContent":["import React from \"react\";\nimport classes from \"./LightModeButton.module.css\";\n\nexport default function LightModeButton({\n  toggleTheme,\n  theme,\n}: {\n  toggleTheme: () => void;\n  theme: string;\n}) {\n  return (\n    <div>\n      <button\n        onClick={toggleTheme}\n        className={classes.light_mode_button}\n        style={{\n          backgroundColor: theme === \"light\" ? \"#333\" : \"white\",\n          color: theme === \"light\" ? \"white\" : \"#333\",\n          border: theme === \"light\" ? \"4px solid green\" : \"4px solid pink\",\n        }}\n      >\n        <span>{theme === \"light\" ? \"Light\" : \"Dark\"}</span>\n      </button>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;;;AAEe,SAAS,gBAAgB,EACtC,WAAW,EACX,KAAK,EAIN;IACC,qBACE,6LAAC;kBACC,cAAA,6LAAC;YACC,SAAS;YACT,WAAW,6KAAA,CAAA,UAAO,CAAC,iBAAiB;YACpC,OAAO;gBACL,iBAAiB,UAAU,UAAU,SAAS;gBAC9C,OAAO,UAAU,UAAU,UAAU;gBACrC,QAAQ,UAAU,UAAU,oBAAoB;YAClD;sBAEA,cAAA,6LAAC;0BAAM,UAAU,UAAU,UAAU;;;;;;;;;;;;;;;;AAI7C;KAtBwB"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/Weather.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"forecastItem\": \"Weather-module__MRIvMG__forecastItem\",\n  \"forecastList\": \"Weather-module__MRIvMG__forecastList\",\n  \"header\": \"Weather-module__MRIvMG__header\",\n  \"todaysWeatherInfo\": \"Weather-module__MRIvMG__todaysWeatherInfo\",\n  \"weatherContainer\": \"Weather-module__MRIvMG__weatherContainer\",\n  \"weatherInfo\": \"Weather-module__MRIvMG__weatherInfo\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynunez/Desktop/henrys-weather-app/henry-weather-app/src/app/components/Weather.tsx"],"sourcesContent":["\"use client\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Location,\n  WeatherData,\n  ForecastData,\n  Forecast,\n} from \"../types/weather-types\";\nimport LightModeButton from \"./LightModeButton/LightModeButton\";\nimport Image from \"next/image\";\nimport classes from \"./Weather.module.css\";\nexport default function Weather({\n  theme,\n  toggleTheme,\n}: {\n  theme: string;\n  toggleTheme: () => void;\n}) {\n  const [location, setLocation] = useState<Location>({ lat: 0, lon: 0 });\n  const [weather, setWeather] = useState<WeatherData | null>(null);\n  const [forecast, setForecast] = useState<ForecastData | null>(null);\n  const [error, setError] = useState<string>(\"\");\n  const [isCelsius, setIsCelsius] = useState(true);\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLocation({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n          });\n        },\n        () => {\n          setError(\"Unable to retrieve location. Please enter a city.\");\n        }\n      );\n    } else {\n      setError(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (location.lat !== 0 && location.lon !== 0) {\n      getWeatherByLocation(location.lat, location.lon);\n    }\n  }, [location]);\n\n  const getWeatherByLocation = async (lat: number, lon: number) => {\n    try {\n      setError(\"\");\n      const [weatherRes, forecastRes] = await Promise.all([\n        fetch(`/api/weather?lat=${lat}&lon=${lon}`),\n        fetch(`/api/forecast?lat=${lat}&lon=${lon}`),\n      ]);\n\n      if (!weatherRes.ok || !forecastRes.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n\n      const weatherData: WeatherData = await weatherRes.json();\n      const forecastData: ForecastData = await forecastRes.json();\n\n      setWeather(weatherData);\n      setForecast(forecastData);\n      console.log(forecast);\n      debugger;\n    } catch {\n      setError(\"Failed to fetch weather data.\");\n    }\n  };\n\n  const convertCelsiusToFahrenheit = (celsius: number) => {\n    return Math.round((celsius * 9) / 5 + 32);\n  };\n\n  return (\n    <div className={classes.weatherContainer}>\n      <div className={classes.header}>\n        <h1>Weather App</h1>\n        <LightModeButton theme={theme} toggleTheme={toggleTheme} />\n      </div>\n      {error && <p>{error}</p>}\n      <div className={classes.weatherInfo}>\n        {weather && (\n          <div className={classes.todaysWeatherInfo}>\n            <h2>{weather.name}</h2>\n            <div>\n              <p>Condition: {weather.weather[0].description}</p>\n              <p>\n                <p>\n                  Feels like:{\" \"}\n                  {isCelsius\n                    ? weather.main.temp\n                    : convertCelsiusToFahrenheit(weather.main.feels_like)}\n                  °{isCelsius ? \"C\" : \"F\"}\n                </p>\n                Temperature:{\" \"}\n                {isCelsius\n                  ? weather.main.temp\n                  : convertCelsiusToFahrenheit(weather.main.temp)}\n                °{isCelsius ? \"C\" : \"F\"}\n              </p>\n              <Image\n                src={`http://openweathermap.org/img/wn/${weather.weather[0]?.icon}.png`}\n                alt=\"Weather Icon\"\n                width={50}\n                height={50}\n              />\n            </div>\n          </div>\n        )}\n\n        {forecast && (\n          <div className={classes.forecastInfo}>\n            <div>\n              <h2>5-Day Forecast</h2>\n              <div>\n                <p>\n                  {forecast.city.name}, {forecast.city.country}\n                </p>\n                <p>\n                  Sunrise:\n                  {new Date(forecast.city.sunrise * 1000).toLocaleTimeString(\n                    \"en-US\",\n                    {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    }\n                  )}\n                </p>\n                <p>\n                  Sunset:\n                  {new Date(forecast.city.sunset * 1000).toLocaleTimeString(\n                    \"en-US\",\n                    {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    }\n                  )}\n                </p>\n              </div>\n              <button onClick={() => setIsCelsius(!isCelsius)}>\n                Switch to {isCelsius ? \"Fahrenheit\" : \"Celsius\"}\n              </button>\n            </div>\n            <div className={classes.forecastList}>\n              {forecast.list\n                .filter((_, index) => index % 8 === 0) // Show once per day\n                .map((day: Forecast, idx) => (\n                  <div key={idx} className={classes.forecastItem}>\n                    <p className={classes.forecastItemDay}>\n                      {new Date(day.dt_txt).toLocaleDateString(\"en-US\", {\n                        weekday: \"long\",\n                      })}\n                    </p>\n                    <p>\n                      Temp:{\" \"}\n                      {isCelsius\n                        ? day.main.temp\n                        : convertCelsiusToFahrenheit(day.main.temp)}\n                      °{isCelsius ? \"C\" : \"F\"}\n                    </p>\n                    <p>{day.weather[0]?.description}</p>\n                    <Image\n                      src={`http://openweathermap.org/img/wn/${day.weather[0]?.icon}.png`}\n                      alt=\"Weather Icon\"\n                      width={50}\n                      height={50}\n                    />\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynunez/Desktop/henrys-weather-app/henry-weather-app/src/app/page.tsx"],"sourcesContent":["\"use client\";\nimport Weather from \"./components/Weather\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Home() {\n  const [theme, setTheme] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"theme\") || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-theme\", theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <Weather theme={theme} toggleTheme={toggleTheme} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAIe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;yBAAE;YACjC,wCAAmC;gBACjC,OAAO,aAAa,OAAO,CAAC,YAAY;YAC1C;;QAEF;;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,SAAS,eAAe,CAAC,YAAY,CAAC,cAAc;YACpD,aAAa,OAAO,CAAC,SAAS;QAChC;yBAAG;QAAC;KAAM;IAEV,MAAM,cAAc;QAClB,SAAS,CAAC,YAAe,cAAc,UAAU,SAAS;IAC5D;IAEA,qBACE,6LAAC;QAAI,OAAO;YAAE,SAAS;YAAQ,gBAAgB;QAAS;kBACtD,cAAA,6LAAC,uIAAA,CAAA,UAAO;YAAC,OAAO;YAAO,aAAa;;;;;;;;;;;AAG1C;GAtBwB;KAAA"}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}